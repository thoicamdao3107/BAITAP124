import sys
import pandas as pd
from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QTableWidgetItem, QMessageBox, QInputDialog
from MainWindow124 import Ui_MainWindow  # Import UI class generated by pyuic

class MainWindow124EXT(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)  # Initialize the UI components

        # Load initial data
        self.df = pd.read_csv('SampleData2.csv')
        print(self.df)

        # Connect button actions to methods
        self.pushButton.clicked.connect(self.export_all_data)  # Button to export all data
        self.pushButton_2.clicked.connect(self.filter_by_birthday)  # Filter by birthday button
        self.pushButton_3.clicked.connect(self.export_top_3_oldest)  # Export top 3 oldest button
        self.pushButton_4.clicked.connect(self.filter_tester_role)  # Filter tester role button
        self.pushButton_5.clicked.connect(self.count_by_role)  # Count by role button
        self.pushButton_6.clicked.connect(self.add_new_row)  # Add new row button

        # Display data in the table
        self.display_data()

    def display_data(self):
        """Display the DataFrame in the QTableWidget"""
        self.tableWidget.clear()  # Clear previous data in the table
        rows, cols = self.df.shape
        self.tableWidget.setRowCount(rows)
        self.tableWidget.setColumnCount(cols)

        self.tableWidget.setHorizontalHeaderLabels(self.df.columns)

        # Populate data in the table
        for row in range(rows):
            for col in range(cols):
                item = QTableWidgetItem(str(self.df.iloc[row, col]))
                self.tableWidget.setItem(row, col, item)

    def export_all_data(self):
        """Export all employee data to the console"""
        print(self.df)

    def filter_by_birthday(self):
        """Filter employees born in 2001"""
        filtered_data = self.df[self.df['Dob'].str.contains('2001')]
        print("\nEmployees born in 2001:")
        print(filtered_data)

    def export_top_3_oldest(self):
        """Export the top 3 employees with the oldest age"""
        self.df['Dob'] = pd.to_datetime(self.df['Dob'], format='%d/%m/%Y')
        sorted_df = self.df.sort_values(by='Dob').head(3)
        print("\nTop 3 Employees with the oldest age:")
        print(sorted_df)

    def filter_tester_role(self):
        """Filter employees with Tester role"""
        testers = self.df[self.df['Role'] == 'Tester']
        print("\nEmployees with Tester role:")
        print(testers)

    def count_by_role(self):
        """Count the number of employees by role"""
        role_count = self.df['Role'].value_counts()
        print("\nNumber of Employees by Role:")
        print(role_count)

    def add_new_row(self):
        """Add new row with user input"""
        symbol, ok1 = QInputDialog.getText(self, "Add Data", "Enter Symbol:")
        if not ok1:
            return

        price, ok2 = QInputDialog.getDouble(self, "Add Data", "Enter Price:")
        if not ok2:
            return

        pe, ok3 = QInputDialog.getDouble(self, "Add Data", "Enter PE:")
        if not ok3:
            return

        # Create a new row and append it to the dataframe
        new_row = {'Symbol': symbol, 'Price': price, 'PE': pe, 'USD': price / 23, 'Group': None}
        self.df = self.df.append(new_row, ignore_index=True)
        self.display_data()
        QMessageBox.information(self, "Add Data", "New row added successfully")

# Main function to run the application
def main():
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow127EXT()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
